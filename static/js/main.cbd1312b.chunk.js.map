{"version":3,"sources":["Piece.js","Player.js","tools.js","Cell.js","ia.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Piece","type","color","allowed","onPieceClick","className","onClick","Player","this","pieces","isPieceAllowed","board","x","y","piece","i","j","zone","getZone","hasWon","rows","cols","zones","needed","push","k","intersection","length","cloneBoard","slice","clonePlayer","player","newPlayer","doMove","splice","findIndex","p","removePlayerPiece","window","players","Cell","onCellClick","getAvailableSituations","isIA","situations","currentPlayer","uniq","situationPlayers","situationBoard","situationPlayer","playv2","state","depth","debug","bestSituation","best","debugBoard","situation","val","minmaxv2","Math","random","console","log","maxMinmaxv2","currentSituation","value","minMinmaxv2","evaluate","finished","IA_DEPTH_MEDIUM","getDefaultState","turn","choose","iaComputing","needRestart","Game","args","withIA","iaLevel","setState","alert","setTimeout","IAPlay","start","Date","newState","end","cells","key","renderGrid","name","checked","onChange","htmlFor","id","event","parseInt","target","map","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cbd1312b.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Piece.css';\n\nfunction Piece({ type, color, allowed, onPieceClick }) {\n  return (\n    <div className={`Piece Piece--${!allowed ? 'notAllowed' : 'allowed'} Piece--${color} Piece--${type}`} onClick={onPieceClick}>\n    </div>\n  );\n}\n\nexport default Piece;\n","class Player {\n  constructor (color) {\n    this.color = color;\n    this.pieces = [\n      'square', 'square',\n      'triangle', 'triangle',\n      'circle', 'circle',\n      'cross', 'cross'\n    ];\n  }\n}\n\nexport default Player;\n","import intersection from 'lodash/intersection';\n\nimport Player from './Player'\n\nexport const isPieceAllowed = (board, x, y, piece, color) => {\n  let i, j;\n\n  // check zone\n  const zone = getZone(x, y);\n\n  for (i = 0; i <= 3; i++) {\n    for (j = 0; j <= 3; j++) {\n      if (board[x][j] && board[x][j].piece === piece && board[x][j].color !== color)\n        return false;\n      if (board[i][y] && board[i][y].piece === piece && board[i][y].color !== color)\n        return false;\n      if (board[i][j] && getZone(i, j) === zone && board[i][j].piece === piece && board[i][j].color !== color)\n        return false;\n    }\n  }\n\n  return true;\n}\n\nexport const isPieceAllowedOld = (board, x, y, piece, color) => {\n  let i, j;\n\n  // check row\n  for (i = 0; i <= 3; i++)\n    if (board[i][y] && board[i][y].piece === piece && board[i][y].color !== color)\n      return false;\n\n  // check coll\n  for (j = 0; j <= 3; j++)\n    if (board[x][j] && board[x][j].piece === piece && board[x][j].color !== color)\n      return false;\n\n  // check zone\n  const zone = getZone(x, y);\n\n  for (i = 0; i <= 3; i++)\n    for (j = 0; j <= 3; j++)\n      if (board[i][j] && getZone(i, j) === zone && board[i][j].piece === piece && board[i][j].color !== color)\n        return false;\n\n  return true;\n}\n\nexport const getZone = (x, y) => {\n  if (x <= 1) {\n    if (y <= 1)\n      return 0;\n    else\n      return 2;\n  } else {\n    if (y <= 1)\n      return 1;\n    else\n      return 3;\n  }\n}\n\nexport const hasWon = board => {\n  let i, j;\n  const rows = [[], [], [], []];\n  const cols = [[], [], [], []];\n  const zones = [[], [], [], []];\n  const needed = ['square', 'triangle', 'circle', 'cross'];\n\n  for (i = 0; i <= 3; i++) {\n    for (j = 0; j <= 3; j++) {\n      const piece = board[i][j].piece;\n      rows[i].push(piece);\n      cols[j].push(piece);\n      zones[getZone(i, j)].push(piece);\n    }\n  }\n\n  for (let k = 0; k <= 3; k++) {\n    if (intersection(rows[k], needed).length === 4)\n      return true;\n    if (intersection(cols[k], needed).length === 4)\n      return true;\n    if (intersection(zones[k], needed).length === 4)\n      return true;\n  }\n\n  return false;\n}\n\nexport const hasWonOld = board => {\n  let i, j;\n  const needed = ['square', 'triangle', 'circle', 'cross'];\n\n  // test rows\n  for (j = 0; j <= 3; j++) {\n    let row = [];\n\n    for (i = 0; i <= 3; i++)\n      row.push(board[i][j].piece);\n\n    if (intersection(row, needed).length === 4)\n      return true;\n  }\n\n  // test cols\n  for (i = 0; i <= 3; i++) {\n    let col = [];\n\n    for (j = 0; j <= 3; j++)\n      col.push(board[i][j].piece);\n\n    if (intersection(col, needed).length === 4)\n      return true;\n  }\n\n  // test zones\n  for (let z = 1; z <= 4; z++) {\n    let zone = [];\n\n    for (i = 0; i <= 3; i++)\n      for (j = 0; j <= 3; j++)\n        if (getZone(i, j) === z)\n          zone.push(board[i][j].piece);\n\n    if (intersection(zone, needed).length === 4)\n      return true;\n  }\n\n  return false;\n}\n\nexport const cloneBoard = board => {\n  return [\n    board[0].slice(),\n    board[1].slice(),\n    board[2].slice(),\n    board[3].slice()\n  ];\n}\n\nexport const clonePlayer = player => {\n  const newPlayer = new Player(player.color);\n  newPlayer.pieces = player.pieces.slice();\n\n  return newPlayer;\n}\n\nexport const removePlayerPieceOld = (player, piece) => {\n  let index;\n\n  for (let i = 0; i < player.pieces.length; i++) {\n    if (player.pieces[i] === piece) {\n      index = i;\n      break;\n    }\n  }\n\n  player.pieces.splice(index, 1);\n}\n\nexport const removePlayerPiece = (player, piece) => {\n  player.pieces.splice(player.pieces.findIndex(p => p === piece), 1);\n}\n\nexport const doMove = (board, player, piece, x, y) => {\n  board[x][y] = { piece, color: player.color };\n  removePlayerPiece(player, piece);\n}\n\nwindow.doMove = doMove;\nwindow.players = [\n  new Player('white'),\n  new Player('black')\n];\n","import React from 'react';\n\nimport Piece from './Piece'\n\nimport { getZone } from './tools'\n\nimport './Cell.css';\n\nfunction Cell({x, y, board, onCellClick }) {\n  return (\n    <div className={`Cell CellX--${x} CellY--${y} CellZone--${getZone(x, y)}`} onClick={onCellClick}>\n      {board && board[x][y] &&\n        <Piece type={board[x][y].piece} color={board[x][y].color} />\n      }\n    </div>\n  );\n}\n\nexport default Cell;\n","import uniq from 'lodash/uniq';\n\nimport {\n  cloneBoard,\n  clonePlayer,\n  hasWon,\n  doMove,\n  isPieceAllowed\n} from './tools'\n\nexport const WEIGHT = 1000;\nexport const MALUS = 69;\n\nexport const DEBUG = true;\n\nexport const getAvailableSituations = (board, players, isIA) => {\n  const situations = [];\n  const currentPlayer = players[isIA ? 1 : 0];\n  const pieces = uniq(currentPlayer.pieces);\n\n  for (let i = 0; i <= 3; i++) {\n    for (let j = 0; j <= 3; j++) {\n      // if already a piece on this case, not playable\n      if (board[i][j])\n        continue;\n\n      for (let p = 0; p < pieces.length; p++) {\n        const piece = pieces[p];\n\n        if (!isPieceAllowed(board, i, j, piece, currentPlayer.color))\n          continue;\n\n        const situationPlayers = [\n          clonePlayer(players[0]),\n          clonePlayer(players[1])\n        ];\n\n        // clone situation.board and situation.player to modify them\n        const situationBoard = cloneBoard(board);\n        const situationPlayer = situationPlayers[isIA ? 1 : 0];\n\n        doMove(situationBoard, situationPlayer, piece, i, j);\n\n        situations.push({\n          board: situationBoard,\n          players: situationPlayers,\n          x: i,\n          y: j,\n          piece,\n          color: situationPlayer.color\n        });\n      }\n    }\n  }\n\n  return situations;\n}\n\nexport const playv2 = (state, depth, debug) => {\n  let best = false;\n  let bestSituation;\n  const situations = getAvailableSituations(state.board, state.players, true);\n\n  if (DEBUG) {\n    var debugBoard = [\n      [{}, {}, {}, {}],\n      [{}, {}, {}, {}],\n      [{}, {}, {}, {}],\n      [{}, {}, {}, {}]\n    ];\n  }\n\n  // first move is not important, do not make many iterations\n  if (state.players[1].pieces.length === 8)\n    depth = 0;\n\n  for (let i = 0; i < situations.length; i++) {\n    const situation = situations[i];\n    const val = minmaxv2(situation.board, depth, situation.players, true);\n\n    if (DEBUG)\n      debugBoard[situation.x][situation.y][situation.piece] = val;\n\n    if (best === false || val > best || (val === best && Math.random() < 0.1)) {\n      best = val;\n      bestSituation = situation;\n    }\n  }\n\n  doMove(state.board, state.players[1], bestSituation.piece, bestSituation.x, bestSituation.y);\n\n  if (debug) {\n    console.log('playv2 best situation', bestSituation.x, bestSituation.y, bestSituation.piece, best);\n    return debugBoard;\n  }\n\n  return state;\n}\n\nexport const play = (state, depth) => {\n  let bestScore = 0;\n  let bestPiece = false;\n  let bestCoordinates = false;\n\n  let players = Object.assign({}, state.players);\n  let currentPlayer = clonePlayer(players[1]);  // IA is black for now on\n  let pieces = uniq(currentPlayer.pieces);\n\n  for (var i = 0; i <= 3; i++) {\n    for (var j = 0; j <= 3; j++) {\n      let board = cloneBoard(state.board);\n\n      // if already a piece on this case, not playable\n      if (board[i][j])\n        continue;\n\n      // loop for each remaining pieces and try to evaluate the play\n      for (var p = 0; p < pieces.length; p++) {\n        const piece = pieces[p];\n        currentPlayer = clonePlayer(players[1]);\n\n        if (!isPieceAllowed(board, i, j, piece, currentPlayer.color))\n          continue;\n\n        doMove(board, currentPlayer, piece, i, j);\n        const val = minmax(board, depth, players, currentPlayer, true);\n\n        // console.log(`${pieces[p]}:${i},${j}`, val);\n\n        if (val > bestScore || (val === bestScore && Math.random() < 0.1)) {\n          bestScore = val;\n          bestPiece = piece;\n          bestCoordinates = { x: i, y: j };\n        }\n      }\n    }\n  }\n\n  // console.log('bestScore', bestScore)\n\n  doMove(state.board, state.players[1], bestPiece, bestCoordinates.x, bestCoordinates.y);\n\n  return state;\n}\n\nexport const maxMinmaxv2 = (situations, depth, players, isIA) => {\n  let best = false;\n  let bestSituation;\n\n  for (let i = 0; i < situations.length; i++) {\n    const currentSituation = situations[i];\n    const value = minmaxv2(currentSituation.board, depth, currentSituation.players, isIA);\n\n    if (best === false || value > best || (value === best && Math.random() < 0.1)) {\n      best = value;\n      bestSituation = currentSituation;\n    }\n  }\n\n  return { best, bestSituation };\n}\n\nexport const minMinmaxv2 = (situations, depth, players, isIA) => {\n  let best = false;\n  let bestSituation;\n\n  for (let i = 0; i < situations.length; i++) {\n    const currentSituation = situations[i];\n    const value = minmaxv2(currentSituation.board, depth, currentSituation.players, isIA);\n\n    if (best === false || value < best || (value === best && Math.random() < 0.1)) {\n      best = value;\n      bestSituation = currentSituation;\n    }\n  }\n\n  return { best, bestSituation };\n}\n\nexport const minmaxv2 = (board, depth, players, isIA) => {\n  if (depth === 0 || hasWon(board))\n    return evaluate(board, players, isIA);\n\n  // get next player situations\n  // ie: if we're currently evaluating an ia move, consider player next situations\n  const situations = getAvailableSituations(board, players, !isIA);\n\n  // const { best, bestSituation } = maxMinmaxv2(situations, depth - 1, players, !isIA);\n  // return best;\n\n  if (isIA) {\n    const { best, bestSituation } = minMinmaxv2(situations, depth - 1, players, false);\n    // console.log('>>>> isIA best', best, bestSituation)\n    return best;\n  } else {\n    const { best, bestSituation } = maxMinmaxv2(situations, depth - 1, players, true);\n    // console.log('isPlayer best', best, bestSituation)\n    return best;\n  }\n}\n\nexport const minmax = (board, depth, players, playerIA, isIA) => {\n  if (depth === 0 || hasWon(board))\n    return evaluate(board, players, isIA);\n}\n\n\n// todo: won't work, need to fake play turn to have proper player.pieces count\nexport const evaluate = (board, players, isIA) => {\n  const finished = hasWon(board);\n  const player = players[isIA ? 1 : 0];\n\n  if (!finished) {\n    const malus = player.pieces.length >= 5 && uniq(player.pieces).length < 4;\n    return (isIA ? 1 : -1) * (malus ? MALUS : 100);\n  }\n\n  if (isIA) {\n    return WEIGHT - players[1].pieces.length;\n  }\n\n  return -WEIGHT + players[0].pieces.length;\n}\n\nwindow.board = [\n  [false, false, false, { piece: 'square', color: 'white' }],\n  [false, false, false, false],\n  [{ piece: 'triangle', color: 'white' }, { piece: 'circle', color: 'black' }, false, false],\n  [false, false, false, false]\n];\nwindow.evaluate = evaluate;\nwindow.playv2 = playv2;\nwindow.getAvailableSituations = getAvailableSituations;\nwindow.minmaxv2 = minmaxv2;\nwindow.maxMinmaxv2 = maxMinmaxv2;\nwindow.minMinmaxv2 = minMinmaxv2;\n","import React from 'react';\n\nimport Cell from './Cell';\nimport Piece from './Piece';\n\nimport Player from './Player';\n\nimport {\n  hasWon,\n  doMove,\n  isPieceAllowed\n} from './tools';\n\nimport {\n  playv2\n} from './ia'\n\nimport './Game.css';\n\nconst IA_DEPTH_HARD = 5;\nconst IA_DEPTH_MEDIUM = 4;\nconst IA_DEPTH_EASY = 2;\n\nexport const getDefaultState = () => ({\n  board: [\n    [false,false,false,false],\n    [false,false,false,false],\n    [false,false,false,false],\n    [false,false,false,false]\n  ],\n  players: [\n    new Player('white'),\n    new Player('black')\n  ],\n  turn: 0,\n  choose: false,\n  iaComputing: false,\n  needRestart: false\n});\n\nclass Game extends React.Component {\n  constructor (args) {\n    super(args);\n\n    this.state = {\n      ...getDefaultState(),\n      withIA: true,\n      iaLevel: IA_DEPTH_MEDIUM\n    }\n  }\n\n  onCellClick (x, y) {\n    if (this.state.board[x][y] || this.state.needRestart)\n      return;\n\n    this.setState({ choose: {x, y} });\n  }\n\n  onPieceClick (piece, i) {\n    let { choose, turn, players, board } = this.state;\n    const { x, y } = choose;\n    let currentPlayer = players[turn%2];\n\n    doMove(board, currentPlayer, piece, x, y);\n\n    if (hasWon(board)) {\n      alert(`Congrats player ${currentPlayer.color}!`);\n      // this.setState(getDefaultState());\n      this.setState({ needRestart: true, choose: false });\n      return;\n    }\n\n    this.setState({\n      board,\n      turn: turn + 1,\n      choose: false\n    }, () => {\n      if (this.state.withIA) {\n        this.setState({ iaComputing: true });\n        setTimeout(() => this.IAPlay(), 300);\n      }\n    });\n  }\n\n  IAPlay () {\n    const start = new Date();\n    const newState = playv2(this.state, this.state.iaLevel);\n    const end = new Date();\n\n    console.log(`IA took ${end-start}ms to play`);\n\n    this.setState({\n      ...newState,\n      turn: this.state.turn + 1,\n      iaComputing: false\n    }, () => {\n      if (hasWon(this.state.board)) {\n        alert(`Congrats IA!`);\n        this.setState({ needRestart: true, choose: false });\n      }\n    });\n  }\n\n  renderGrid (board) {\n    const cells = [];\n\n    for (let i = 0; i <= 3; i++)\n      for (let j = 0; j <= 3; j++)\n        cells.push(<Cell key={`${i}:${j}`} x={i} y={j} board={board} onCellClick={() => this.onCellClick(i, j)} />)\n\n    return cells;\n  }\n\n  render () {\n    const { board, players, turn, choose } = this.state;\n    const { x, y } = choose;\n    const currentPlayer = players[turn%2];\n\n    return (\n      <div className=\"Game\">\n\n        <div className=\"Board\">\n\n        {this.renderGrid(board)}\n\n        </div>\n\n        <div className=\"Controls\">\n          <div className=\"HumanOrIa\">\n            Player vs. Player<input type=\"radio\" name=\"player2\" value=\"IA\" checked={!this.state.withIA} onChange={() => this.setState({ withIA: false })} />\n            Player vs. IA<input type=\"radio\" name=\"player2\" value=\"human\" checked={this.state.withIA} onChange={() => this.setState({ withIA: true })} />\n          </div>\n          {this.state.withIA &&\n            <div className=\"IALevel\">\n              <label htmlFor=\"ia_level\">IA Difficulty</label>\n              <select id=\"ia_level\" name=\"ia_level\" value={this.state.iaLevel} onChange={event => this.setState({ iaLevel: parseInt(event.target.value, 10) }) }>\n                <option value={IA_DEPTH_EASY}>Easy</option>\n                <option value={IA_DEPTH_MEDIUM}>Medium</option>\n                <option value={IA_DEPTH_HARD}>Hard</option>\n              </select>\n            </div>\n          }\n\n          {!this.state.needRestart &&\n            <div>Player {currentPlayer.color} turn</div>\n          }\n\n          {this.state.needRestart &&\n            <button onClick={() => {\n              this.setState(getDefaultState());\n            }}>New game!</button>\n          }\n\n          <div>--</div>\n\n          {this.state.iaComputing &&\n            <div>IA is computing..</div>\n          }\n\n          <div className=\"Choice\">\n            {choose &&\n              <div>\n                <div>Choose</div>\n                <div onClick={() => this.setState({ choose: false })}>X</div>\n                <div>\n                  {currentPlayer.pieces.map((piece, i) => {\n                    if (!isPieceAllowed(board, x, y, piece, currentPlayer.color))\n                      return false;\n                    return <Piece key={i} color={currentPlayer.color} type={piece} allowed={true} onPieceClick={() => this.onPieceClick(piece, i) } />\n                  })}\n                </div>\n              </div>\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\n\nimport Game from './Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}